#!/usr/bin/env node

/**
 * CSV Export Test Script
 * 
 * This script tests the CSV export functionality by generating sample CSV files
 * and verifying the output format, encoding, and structure.
 */

const fs = require('fs');
const path = require('path');

// Simulate the CSV conversion function
function convertToCSV(data, headers) {
  const headerRow = headers.join(',');
  const dataRows = data.map(row => {
    return headers.map(header => {
      const value = row[header] || '';
      // Escape commas and quotes in CSV
      if (value.toString().includes(',') || value.toString().includes('"') || value.toString().includes('\n')) {
        return `"${value.toString().replace(/"/g, '""')}"`;
      }
      return value;
    }).join(',');
  });
  return [headerRow, ...dataRows].join('\n');
}

// Test data
const artifactsData = [
  {
    'Ë≥áÊñôÂêç': 'Âª∫ÁØâÁ¢∫Ë™çÊ∏àË®º',
    'Á®ÆÂà•': 'Ê≥ïË¶è',
    'Èñ¢ÈÄ£È†ÖÁõÆ': 'Âª∫ÁØâÂü∫Ê∫ñÊ≥ï',
    'ÂèñÂæóÂÖà': 'Ê®™ÊµúÂ∏ÇÂª∫ÁØâÂ±Ä',
    'ÂèñÂæóÊâãÊÆµ': 'Á™ìÂè£',
    'ÂèñÂæóÊó•': '2025-01-15',
    'ÊãÖÂΩì': 'Áî∞‰∏≠',
    'ÂÇôËÄÉ': 'ÂèñÂæóÊ∏à„Åø'
  },
  {
    'Ë≥áÊñôÂêç': 'ÈñãÁô∫Ë®±ÂèØÈÄöÁü•Êõ∏',
    'Á®ÆÂà•': 'Ê≥ïË¶è',
    'Èñ¢ÈÄ£È†ÖÁõÆ': 'ÈÉΩÂ∏ÇË®àÁîªÊ≥ï',
    'ÂèñÂæóÂÖà': 'Á•ûÂ•àÂ∑ùÁúå',
    'ÂèñÂæóÊâãÊÆµ': '„Ç™„É≥„É©„Ç§„É≥',
    'ÂèñÂæóÊó•': '2025-01-16',
    'ÊãÖÂΩì': '‰ΩêËó§',
    'ÂÇôËÄÉ': 'ËøΩÂä†Ë™øÊüªÂøÖË¶Å'
  }
];

const reportsData = [
  {
    'Ê°à‰ª∂Âêç': '„ÉÄ„Éü„Éº„Çø„ÉØ„ÉºÊ°à‰ª∂',
    'Âú∞Âüü': 'Á•ûÂ•àÂ∑ùÁúåÊ®™ÊµúÂ∏Ç',
    'Á®ÆÂà•': '„Éû„É≥„Ç∑„Éß„É≥',
    'ÂèñÂæóÊ∏à': 'Âª∫ÁØâÁ¢∫Ë™çÊ∏àË®º„ÄÅÈñãÁô∫Ë®±ÂèØ',
    'Êú™ÂèñÂæó': 'ÈÅìË∑ØÂç†Áî®Ë®±ÂèØ',
    'ÊâÄË¶ã': '‰∏ÄÈÉ®ËøΩÂä†Ë™øÊüªÂøÖË¶Å',
    'Âà§Êñ≠': 'Êù°‰ª∂‰ªò„ÅçÂèØ'
  }
];

const tasksData = [
  {
    '„Çø„Çπ„ÇØÂêç': 'Áî®Ë™û„ÉÑ„Éº„É´„ÉÅ„ÉÉ„ÉóÊ©üËÉΩËøΩÂä†',
    'Ë™¨Êòé': 'UI‰∏ä„ÅßÂ∞ÇÈñÄÁî®Ë™û„Å´„Éû„Ç¶„Çπ„Ç™„Éº„Éê„Éº„Åô„Çã„Å®Ë™¨Êòé„ÅåË°®Á§∫„Åï„Çå„ÇãÊ©üËÉΩ',
    'ÂÑ™ÂÖàÂ∫¶': '‰∏≠',
    '„Çπ„ÉÜ„Éº„Çø„Çπ': 'Êú™ÁùÄÊâã',
    'ÊãÖÂΩì': 'ÈñãÁô∫„ÉÅ„Éº„É†',
    '„Éï„Çß„Éº„Ç∫': '„Éï„Çß„Éº„Ç∫2'
  }
];

// Test configuration
const tests = [
  {
    type: 'artifacts',
    headers: ['Ë≥áÊñôÂêç', 'Á®ÆÂà•', 'Èñ¢ÈÄ£È†ÖÁõÆ', 'ÂèñÂæóÂÖà', 'ÂèñÂæóÊâãÊÆµ', 'ÂèñÂæóÊó•', 'ÊãÖÂΩì', 'ÂÇôËÄÉ'],
    data: artifactsData
  },
  {
    type: 'reports',
    headers: ['Ê°à‰ª∂Âêç', 'Âú∞Âüü', 'Á®ÆÂà•', 'ÂèñÂæóÊ∏à', 'Êú™ÂèñÂæó', 'ÊâÄË¶ã', 'Âà§Êñ≠'],
    data: reportsData
  },
  {
    type: 'tasks',
    headers: ['„Çø„Çπ„ÇØÂêç', 'Ë™¨Êòé', 'ÂÑ™ÂÖàÂ∫¶', '„Çπ„ÉÜ„Éº„Çø„Çπ', 'ÊãÖÂΩì', '„Éï„Çß„Éº„Ç∫'],
    data: tasksData
  }
];

// Create test output directory
const outputDir = path.join(__dirname, '..', 'test-output');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Run tests
console.log('üß™ Running CSV Export Tests...\n');

let allPassed = true;

tests.forEach(test => {
  console.log(`Testing ${test.type} export...`);
  
  try {
    const csv = convertToCSV(test.data, test.headers);
    const lines = csv.split('\n');
    
    // Verify header
    const expectedHeader = test.headers.join(',');
    if (lines[0] !== expectedHeader) {
      console.error(`  ‚ùå Header mismatch for ${test.type}`);
      console.error(`     Expected: ${expectedHeader}`);
      console.error(`     Got: ${lines[0]}`);
      allPassed = false;
    } else {
      console.log(`  ‚úÖ Header correct`);
    }
    
    // Verify row count
    const expectedRows = test.data.length + 1; // +1 for header
    if (lines.length !== expectedRows) {
      console.error(`  ‚ùå Row count mismatch for ${test.type}`);
      console.error(`     Expected: ${expectedRows} rows`);
      console.error(`     Got: ${lines.length} rows`);
      allPassed = false;
    } else {
      console.log(`  ‚úÖ Row count correct: ${test.data.length} data rows`);
    }
    
    // Save to file for manual inspection
    const filename = `MAF_${test.type}_test.csv`;
    const filepath = path.join(outputDir, filename);
    fs.writeFileSync(filepath, csv, 'utf-8');
    console.log(`  üìÑ Saved to: ${filepath}`);
    
    // Show preview
    console.log(`  Preview (first 2 lines):`);
    lines.slice(0, 2).forEach(line => {
      console.log(`    ${line}`);
    });
    
  } catch (error) {
    console.error(`  ‚ùå Error testing ${test.type}:`, error.message);
    allPassed = false;
  }
  
  console.log('');
});

// Summary
if (allPassed) {
  console.log('‚úÖ All tests passed!');
  process.exit(0);
} else {
  console.log('‚ùå Some tests failed!');
  process.exit(1);
}
